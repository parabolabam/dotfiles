[
[4,"auth_jwt","Enables validation of JSON Web Token. The specified `_string_` is used as a `realm`. Parameter value can contain variables.","<p>Enables validation of JSON Web Token. The specified <code><i>string</i></code> is used as a <code>realm</code>. Parameter value can contain variables.</p><p>The optional <code>token</code> parameter specifies a variable that contains JSON Web Token. By default, JWT is passed in the “Authorization” header as a <a href=\"https://tools.ietf.org/html/rfc6750\">Bearer Token</a>. JWT may be also passed as a cookie or a part of a query string:</p><blockquote class=\"example\"><pre>auth_jwt \"closed site\" token=$cookie_auth_token;\n</pre></blockquote><p>The special value <code>off</code> cancels the effect of the <code>auth_jwt</code> directive inherited from the previous configuration level.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt</strong> <code><i>string</i></code> [<code>token=</code><code><i>$variable</i></code>] | <code>off</code>;</code><br></td></tr><tr><th>Default:</th><td><pre>auth_jwt off;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br></td></tr></tbody></table>"],
[4,"auth_jwt_claim_set","Sets the `_variable_` to a JWT claim parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.","<p>Sets the <code><i>variable</i></code> to a JWT claim parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.</p><blockquote class=\"example\"><pre>auth_jwt_claim_set $email info e-mail;\nauth_jwt_claim_set $job info \"job title\";\n</pre></blockquote><blockquote class=\"note\">Prior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.</blockquote><blockquote class=\"note\">Variable values for tokens encrypted with JWE are available only after decryption which occurs during the <a href=\"https://nginx.org/en/docs/dev/development_guide.html#http_phases\">Access</a> phase.</blockquote>",["Prior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.","Variable values for tokens encrypted with JWE are available only after decryption which occurs during the [Access](../dev/development_guide.html#http_phases) phase."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_claim_set</strong> <code><i>$variable</i></code> <code><i>name</i></code> ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></tbody></table><p>This directive appeared in version 1.11.10.</p>"],
[4,"auth_jwt_header_set","Sets the `_variable_` to a JOSE header parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.","<p>Sets the <code><i>variable</i></code> to a JOSE header parameter identified by key names. Name matching starts from the top level of the JSON tree. For arrays, the variable keeps a list of array elements separated by commas.</p><blockquote class=\"note\">Prior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays.</blockquote>",["Prior to version 1.13.7, only one key name could be specified, and the result was undefined for arrays."],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_header_set</strong> <code><i>$variable</i></code> <code><i>name</i></code> ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></tbody></table><p>This directive appeared in version 1.11.10.</p>"],
[4,"auth_jwt_key_file","Specifies a `_file_` in [JSON Web Key Set](https://tools.ietf.org/html/rfc7517#section-5) format for validating JWT signature. Parameter value can contain variables.","<p>Specifies a <code><i>file</i></code> in <a href=\"https://tools.ietf.org/html/rfc7517#section-5\">JSON Web Key Set</a> format for validating JWT signature. Parameter value can contain variables.</p><p>Several <code>auth_jwt_key_file</code> directives can be specified on the same level (1.21.1):</p><blockquote class=\"example\"><pre>auth_jwt_key_file conf/keys.json;\nauth_jwt_key_file conf/key.jwk;\n</pre></blockquote><p>If at least one of the specified keys cannot be loaded or processed, nginx will return the 500 (Internal Server Error) error.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_key_file</strong> <code><i>file</i></code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br></td></tr></tbody></table>"],
[4,"auth_jwt_key_request","Allows retrieving a [JSON Web Key Set](https://tools.ietf.org/html/rfc7517#section-5) file from a subrequest for validating JWT signature and sets the URI where the subrequest will be sent to. Parameter value can contain variables. To avoid validation overhead, it is recommended to cache the key file:","<p>Allows retrieving a <a href=\"https://tools.ietf.org/html/rfc7517#section-5\">JSON Web Key Set</a> file from a subrequest for validating JWT signature and sets the URI where the subrequest will be sent to. Parameter value can contain variables. To avoid validation overhead, it is recommended to cache the key file:</p><blockquote class=\"example\"><pre>proxy_cache_path /data/nginx/cache levels=1 keys_zone=foo:10m;\n\nserver {\n    ...\n\n    location / {\n        auth_jwt             \"closed site\";\n        auth_jwt_key_request /jwks_uri;\n    }\n\n    location = /jwks_uri {\n        internal;\n        proxy_cache foo;\n        proxy_pass  http://idp.example.com/keys;\n    }\n}\n</pre></blockquote><p>Several <code>auth_jwt_key_request</code> directives can be specified on the same level (1.21.1):</p><blockquote class=\"example\"><pre>auth_jwt_key_request /jwks_uri;\nauth_jwt_key_request /jwks2_uri;\n</pre></blockquote><p>If at least one of the specified keys cannot be loaded or processed, nginx will return the 500 (Internal Server Error) error.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_key_request</strong> <code><i>uri</i></code>;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br></td></tr></tbody></table><p>This directive appeared in version 1.15.6.</p>"],
[4,"auth_jwt_leeway","Sets the maximum allowable leeway to compensate clock skew when verifying the [exp](https://tools.ietf.org/html/rfc7519#section-4.1.4) and [nbf](https://tools.ietf.org/html/rfc7519#section-4.1.5) JWT claims.","<p>Sets the maximum allowable leeway to compensate clock skew when verifying the <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.4\">exp</a> and <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.5\">nbf</a> JWT claims.</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_leeway</strong> <code><i>time</i></code>;</code><br></td></tr><tr><th>Default:</th><td><pre>auth_jwt_leeway 0s;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code><br></td></tr></tbody></table><p>This directive appeared in version 1.13.10.</p>"],
[4,"auth_jwt_type","Specifies which type of JSON Web Token to expect: JWS (`signed`), JWE (`encrypted`), or signed and then encrypted Nested JWT (`nested`) (1.21.0).","<p>Specifies which type of JSON Web Token to expect: JWS (<code>signed</code>), JWE (<code>encrypted</code>), or signed and then encrypted Nested JWT (<code>nested</code>) (1.21.0).</p>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_type</strong> <code><i>signed</i></code> | <code><i>encrypted</i></code> | <code><i>nested</i></code>;</code><br></td></tr><tr><th>Default:</th><td><pre>auth_jwt_type signed;</pre></td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br></td></tr></tbody></table><p>This directive appeared in version 1.19.7.</p>"],
[4,"auth_jwt_require","Defines additional conditions for JWT validation. The value can contain text, variables, and their combination. The authentication will succeed only if all the values are not empty and are not equal to “0”.","<p>Defines additional conditions for JWT validation. The value can contain text, variables, and their combination. The authentication will succeed only if all the values are not empty and are not equal to “0”.</p><blockquote class=\"example\"><pre>map $jwt_claim_iss $valid_jwt_iss {\n    \"good\" 1;\n}\n...\n\nauth_jwt_require $valid_jwt_iss;\n</pre></blockquote>",[],"<table ><tbody><tr><th>Syntax:</th><td><code><strong>auth_jwt_require</strong> <code><i>value</i></code> ...;</code><br></td></tr><tr><th>Default:</th><td>—</td></tr><tr><th>Context:</th><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code><br></td></tr></tbody></table><p>This directive appeared in version 1.21.2.</p>"],
[5,"<p>The <code>ngx_http_auth_jwt_module</code> module supports embedded variables:</p><p></p><dl class=\"compact\"><dt id=\"var_jwt_header_\"><code>$jwt_header_</code><code><i>name</i></code></dt><dd>returns the value of a specified <a href=\"https://tools.ietf.org/html/rfc7515#section-4\">JOSE header</a></dd><dt id=\"var_jwt_claim_\"><code>$jwt_claim_</code><code><i>name</i></code></dt><dd>returns the value of a specified <a href=\"https://tools.ietf.org/html/rfc7519#section-4\">JWT claim</a><p>For nested claims and claims including a dot (“.”), the value of the variable cannot be evaluated; the <a href=\"https://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html#auth_jwt_claim_set\">auth_jwt_claim_set</a> directive should be used instead.</p><p>Variable values for tokens encrypted with JWE are available only after decryption which occurs during the <a href=\"https://nginx.org/en/docs/dev/development_guide.html#http_phases\">Access</a> phase.</p></dd><dt id=\"var_jwt_payload\"><code>$jwt_payload</code></dt><dd>returns the decrypted top-level payload of <code>nested</code> or <code>encrypted</code> tokens (1.21.2). For nested tokens returns the enclosed JWS token. For encrypted tokens returns JSON with claims.</dd></dl>"]
]